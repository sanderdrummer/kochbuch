{"version":3,"sources":["common/fab.tsx","db.ts","recipe/recipe-hooks.tsx","recipe/recipe-form.tsx","recipe/recipe-page.tsx","list/list-hooks.tsx","list/list-form.tsx","list/list-page.tsx","settings/import-export.tsx","settings/settings-page.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["fabStyles","makeStyles","theme","createStyles","fab","position","bottom","spacing","right","BottomRightFab","onClick","label","children","styles","Fab","className","color","aria-label","db","listItems","recipes","version","stores","table","Dexie","getRecipeByName","title","a","where","equals","toArray","recipe","getPagedRecipes","offset","limit","addRecipe","add","updateRecipe","put","deleteRecipe","delete","bulkAddRecipes","bulkPut","addListItems","map","inBasket","recipeTitleCache","useRecipeByTitle","React","useState","status","setStatus","fetchRecipe","result","useEffect","retry","updateCache","RecipeForm","onComplete","Card","CardHeader","CardContent","autoComplete","onSubmit","e","form","currentTarget","preventDefault","nextRecipe","titleName","value","tags","ingredients","split","description","reset","console","log","TextField","margin","fullWidth","defaultValue","required","name","multiline","Box","mt","Button","disabled","type","bgcolor","RecipeEditForm","navigate","useNavigate","id","useParams","decodeURIComponent","Skeleton","height","Delete","RecipeDetails","subheader","ingredient","Typography","key","style","whiteSpace","CardActions","Edit","RecipeList","setRecipes","hasMore","setHasMore","offsetRef","useRef","fetchRecipes","current","length","recipeListCache","count","useRecipes","List","ListItem","ListItemText","primary","secondary","Add","RecipePage","path","element","listItemsCache","useListItems","list","setList","fetchList","async","ListForm","onCompleted","startIcon","Save","ClearListDialog","onClearList","open","setOpen","handleClose","Dialog","onClose","aria-labelledby","DialogTitle","DialogActions","clear","autoFocus","ListPage","item","button","listItem","Checkbox","checked","inputProps","Divider","SwipeableDrawer","anchor","onOpen","ImportRecipes","onChange","event","reader","FileReader","onload","target","JSON","parse","readAsText","files","Snackbar","autoHideDuration","undefined","message","anchorOrigin","vertical","horizontal","ExportRecipes","href","updateHref","getData","data","encodeURIComponent","stringify","download","SettingsPage","useStyles","nav","marginTop","top","BottomNav","setValue","AppBar","BottomNavigation","showLabels","BottomNavigationAction","icon","FormatListBulleted","MenuBook","Settings","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","ThemeProvider","CssBaseline","Container","mb","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3d419336.chunk.js","sourcesContent":["import React from \"react\";\nimport { createStyles, makeStyles, Fab, Theme } from \"@material-ui/core\";\n\nconst fabStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: \"fixed\",\n      bottom: theme.spacing(8),\n\n      right: theme.spacing(2)\n    }\n  })\n);\n\nexport const BottomRightFab: React.FC<{\n  onClick: (e: any) => void;\n  label: string;\n}> = ({ onClick, label, children }) => {\n  const styles = fabStyles();\n  return (\n    <Fab\n      onClick={onClick}\n      className={styles.fab}\n      color=\"primary\"\n      aria-label={label}\n    >\n      {children}\n    </Fab>\n  );\n};\n","import Dexie from \"dexie\";\n\nexport interface ListItem {\n  title: string;\n  inBasket: boolean;\n}\n\nexport interface Recipe {\n  title: string;\n  tags: string;\n  ingredients: string[];\n  description: string;\n}\n\nexport const DEFAULT_PAGE_SIZE = 50;\n\nexport class ListDb extends Dexie {\n  listItems: Dexie.Table<ListItem, string>;\n  recipes: Dexie.Table<Recipe, string>;\n  constructor() {\n    super(\"ListDB6\");\n    this.version(1).stores({\n      listItems: \"title\",\n      recipes: \"title,tags\"\n    });\n    this.listItems = this.table(\"listItems\");\n    this.recipes = this.table(\"recipes\");\n  }\n}\n\nconst db = new ListDb();\n\nexport const getRecipeByName = async (title: string) => {\n  const [recipe] = await db.recipes\n    .where(\"title\")\n    .equals(title)\n    .toArray();\n\n  return recipe;\n};\n\nexport const getRecipes = () => {\n  return db.recipes.toArray();\n};\n\nexport const getPagedRecipes = (offset = 0) => {\n  return db.recipes\n    .offset(offset)\n    .limit(DEFAULT_PAGE_SIZE)\n    .toArray();\n};\n\nexport const getRecipesCount = () => {\n  return db.recipes.count();\n};\nexport const addRecipe = (recipe: Recipe) => {\n  return db.recipes.add(recipe);\n};\nexport const updateRecipe = (recipe: Recipe) => {\n  return db.recipes.put(recipe);\n};\nexport const deleteRecipe = (title: string) => {\n  return db.recipes.delete(title);\n};\nexport const bulkAddRecipes = (recipes: Recipe[]) => {\n  return db.recipes.bulkPut(recipes);\n};\nexport const getRecipesForExport = () => {\n  return db.recipes.toArray();\n};\n\nexport const getList = () => {\n  return db.listItems.toArray();\n};\n\nexport const addListItem = (listItem: ListItem) => {\n  return db.listItems.add(listItem);\n};\n\nexport const addListItems = (listItems: string[]) => {\n  return db.listItems.bulkPut(\n    listItems.map(title => ({\n      title,\n      inBasket: false\n    }))\n  );\n};\n\nexport const updateListItem = (listItem: ListItem) => {\n  return db.listItems.put(listItem);\n};\n\nexport const clearList = () => {\n  return db.listItems.clear();\n};\n","import React from \"react\";\n\nimport {\n  Recipe,\n  getRecipeByName,\n  getPagedRecipes,\n  getRecipesCount,\n  DEFAULT_PAGE_SIZE\n} from \"../db\";\n\nexport type Status<T = \"success\"> = \"\" | \"pending\" | \"error\" | T;\n\nconst recipeTitleCache: Record<string, Recipe> = {};\nlet recipeListCache: Recipe[] = [];\n\nexport const useRecipeByTitle = (title: string) => {\n  const [status, setStatus] = React.useState<Status<Recipe>>(\n    recipeTitleCache[title] || \"\"\n  );\n\n  const updateCache = (recipe: Recipe) => {\n    recipeTitleCache[recipe.title] = recipe;\n  };\n\n  const fetchRecipe = async (title: string) => {\n    try {\n      if (recipeTitleCache[title]) {\n        setStatus(recipeTitleCache[title]);\n        return;\n      }\n      setStatus(\"pending\");\n      const result = await getRecipeByName(title);\n      setStatus(result);\n      recipeTitleCache[title] = result;\n    } catch {\n      setStatus(\"error\");\n    }\n  };\n  React.useEffect(() => {\n    fetchRecipe(title);\n  }, [title]);\n\n  return {\n    status,\n    retry: fetchRecipe,\n    updateCache\n  };\n};\n\nexport const useRecipes = () => {\n  const status = \"\";\n  const [recipes, setRecipes] = React.useState<Recipe[]>([]);\n  const [hasMore, setHasMore] = React.useState(false);\n  const offsetRef = React.useRef(0);\n\n  const fetchRecipes = async () => {\n    try {\n      const result = await getPagedRecipes(offsetRef.current);\n      if (result.length) {\n        offsetRef.current += DEFAULT_PAGE_SIZE;\n        const recipeListCache = [...recipes, ...result];\n        setRecipes(recipeListCache);\n        const count = await getRecipesCount();\n        setHasMore(count !== recipeListCache.length);\n      } else {\n        setHasMore(false);\n      }\n    } catch {}\n  };\n\n  return {\n    status,\n    hasMore,\n    recipes,\n    fetchRecipes\n  };\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Add, Edit, Delete } from \"@material-ui/icons\";\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Typography,\n  CardContent,\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  CardActions\n} from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nimport { BottomRightFab } from \"../common\";\nimport {\n  Recipe,\n  addRecipe,\n  updateRecipe,\n  addListItems,\n  deleteRecipe\n} from \"../db\";\nimport { useRecipeByTitle, useRecipes } from \"./recipe-hooks\";\n\nexport const RecipeForm: React.FC<{\n  onComplete: (recipe: Recipe) => void;\n  recipe?: Recipe;\n}> = ({ onComplete, recipe }) => {\n  const [status, setStatus] = React.useState<\n    \"\" | \"pending\" | \"error\" | \"success\"\n  >(\"\");\n  return (\n    <Card>\n      <CardHeader title=\"Neues Rezept\" />\n      <CardContent>\n        <form\n          autoComplete=\"off\"\n          onSubmit={async e => {\n            const form = e.currentTarget;\n            e.preventDefault();\n            const nextRecipe: Recipe = {\n              title: form.titleName.value,\n              tags: form.tags.value || \"\",\n              ingredients: form.ingredients.value.split(\"\\n\"),\n              description: form.description.value\n            };\n            try {\n              setStatus(\"pending\");\n              if (recipe) {\n                await updateRecipe(nextRecipe);\n              } else {\n                await addRecipe(nextRecipe);\n              }\n              onComplete(nextRecipe);\n              form.reset();\n              setStatus(\"success\");\n            } catch (e) {\n              console.log(e);\n              setStatus(\"error\");\n            }\n          }}\n        >\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            defaultValue={recipe?.title}\n            required\n            label=\"Rezept Titel\"\n            name=\"titleName\"\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            defaultValue={recipe?.tags}\n            label=\"Tags\"\n            name=\"tags\"\n          />\n          <TextField\n            margin=\"normal\"\n            multiline\n            fullWidth\n            required\n            defaultValue={recipe?.ingredients}\n            label=\"Zutaten\"\n            name=\"ingredients\"\n          />\n          <TextField\n            margin=\"normal\"\n            multiline\n            fullWidth\n            required\n            defaultValue={recipe?.description}\n            label=\"Zubereitung\"\n            name=\"description\"\n          />\n          <Box mt={2}>\n            <Button\n              disabled={status === \"pending\"}\n              color=\"primary\"\n              type=\"submit\"\n            >\n              {recipe\n                ? `änderung an ${recipe.title} speichern`\n                : \"neues Rezept speichern\"}\n            </Button>\n          </Box>\n          <Box bgcolor=\"primary\" mt=\"2\">\n            {status === \"pending\" && \"erstelle Rezept\"}\n            {status === \"error\" && \"oh oh da ist etwas schief gelaufen\"}\n            {status === \"success\" && \"neues Rezept erstellt!\"}\n          </Box>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport const RecipeEditForm: React.FC = () => {\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const title = decodeURIComponent(id);\n  const { status, updateCache } = useRecipeByTitle(title);\n\n  if (status === \"\" || status === \"pending\" || status === \"error\") {\n    return <Skeleton height=\"12rem\" />;\n  }\n\n  return (\n    <>\n      <RecipeForm\n        onComplete={recipe => {\n          updateCache(recipe);\n          navigate(`/kochbuch/recipes/${recipe.title}`);\n        }}\n        recipe={status}\n      />\n\n      <BottomRightFab\n        label=\"Rezept löschen\"\n        onClick={async () => {\n          try {\n            await deleteRecipe(status.title);\n            navigate(\"/kochbuch/recipes\");\n          } catch (e) {\n            console.log(e);\n          }\n        }}\n      >\n        <Delete />\n      </BottomRightFab>\n    </>\n  );\n};\n\nexport const RecipeDetails: React.FC = () => {\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const title = decodeURIComponent(id);\n  const { status } = useRecipeByTitle(title);\n\n  if (status === \"\" || status === \"pending\") {\n    return <Skeleton height=\"12rem\" />;\n  }\n\n  if (status === \"error\") {\n    return <Box>rezpete konnten nicht geladen werden</Box>;\n  }\n\n  return (\n    <Box mt={3}>\n      <Card>\n        <CardHeader title={status.title} subheader={status.tags}></CardHeader>\n        <CardContent>\n          {status.ingredients.map(ingredient => (\n            <Typography key={ingredient}>{ingredient}</Typography>\n          ))}\n          <Typography style={{ whiteSpace: \"pre-wrap\" }}>\n            {status.description}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button\n            onClick={async () => {\n              await addListItems(status.ingredients);\n              navigate(\"/kochbuch/list\");\n            }}\n          >\n            {status.title} zur Einkaufsliste hinzufügen\n          </Button>\n        </CardActions>\n      </Card>\n      <BottomRightFab\n        onClick={() => navigate(\"edit\")}\n        label=\"Rezept bearbeiten\"\n        children={<Edit />}\n      />\n    </Box>\n  );\n};\n\nexport const ListLoader: React.FC = () => {\n  return (\n    <>\n      <Skeleton height=\"4rem\" />\n      <Skeleton height=\"4rem\" />\n    </>\n  );\n};\n\nexport const RecipeList = () => {\n  const { recipes, status, fetchRecipes, hasMore } = useRecipes();\n  const navigate = useNavigate();\n\n  React.useEffect(() => {\n    fetchRecipes();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <List>\n        {recipes.map(recipe => (\n          <ListItem\n            onClick={() => navigate(`${recipe.title}`)}\n            key={recipe.title}\n          >\n            <ListItemText primary={recipe.title} secondary={recipe.tags} />\n          </ListItem>\n        ))}\n      </List>\n      {hasMore && <Button onClick={fetchRecipes}>Load more</Button>}\n\n      {status === \"error\" && (\n        <Box>\n          rezpete konnten nicht geladen werden{\" \"}\n          <Button onClick={fetchRecipes}>nochmal versuchen</Button>\n        </Box>\n      )}\n      <BottomRightFab\n        onClick={() => navigate(\"add\")}\n        label=\"Rezept hinzufügen\"\n        children={<Add />}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n//@ts-ignore\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport {\n  RecipeForm,\n  RecipeList,\n  RecipeDetails,\n  RecipeEditForm\n} from \"./recipe-form\";\n\nexport const RecipePage = () => {\n  const navigate = useNavigate();\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<RecipeList />} />\n      <Route\n        path=\"/add\"\n        element={\n          <RecipeForm\n            onComplete={recipe => {\n              navigate(\"/kochbuch/recipes/\" + recipe.title);\n            }}\n          />\n        }\n      />\n      <Route path=\"/:id\" element={<RecipeDetails />} />\n      <Route path=\"/:id/edit\" element={<RecipeEditForm />} />\n    </Routes>\n  );\n};\n","import React from \"react\";\n\nimport { ListItem, getList } from \"../db\";\n\nlet listItemsCache: ListItem[] = [];\n\nexport const useListItems = () => {\n  const [list, setList] = React.useState<ListItem[]>(listItemsCache);\n\n  const fetchList = async () => {\n    try {\n      const result = await getList();\n      listItemsCache = result;\n      setList(result);\n    } catch {}\n  };\n\n  return {\n    list,\n    fetchList\n  };\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { Save } from \"@material-ui/icons\";\nimport {\n  Box,\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button\n} from \"@material-ui/core\";\n\nimport { addListItems } from \"../db\";\n\nexport const ListForm: React.FC<{ onCompleted(): void }> = ({\n  onCompleted\n}) => {\n  return (\n    <Box>\n      <Card>\n        <CardHeader title=\"Einkaufsliste erweitern\" />\n        <CardContent>\n          <form\n            onSubmit={async e => {\n              e.preventDefault();\n              const form = e.currentTarget;\n              const listItems: string[] = form.listItems.value.split(\"\\n\");\n              console.log(listItems);\n              try {\n                await addListItems(listItems);\n                form.reset();\n                onCompleted();\n              } catch (e) {\n                console.log(e);\n              }\n            }}\n          >\n            <TextField\n              multiline\n              fullWidth\n              name=\"listItems\"\n              label=\"Einkaufsliste\"\n              required\n            />\n            <Button type=\"submit\" startIcon={<Save />}>\n              speichern\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { useListItems } from \"./list-hooks\";\nimport {\n  ListItem,\n  ListItemText,\n  SwipeableDrawer,\n  List,\n  Divider,\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogActions,\n  Checkbox\n} from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\n\nimport { BottomRightFab } from \"../common\";\n\nimport { ListForm } from \"./list-form\";\nimport { clearList, updateListItem } from \"../db\";\n\nconst ClearListDialog: React.FC<{ onClearList(): void }> = ({\n  onClearList\n}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = () => setOpen(false);\n  const handleOpen = () => setOpen(true);\n\n  return (\n    <>\n      <Button onClick={handleOpen}>Liste löschen</Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"clear-list-dialog-title\"\n      >\n        <DialogTitle id=\"clear-list-dialog-title\">\n          Die Einkaufsliste leeren ?\n        </DialogTitle>\n\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            nein\n          </Button>\n          <Button\n            onClick={async () => {\n              try {\n                await clearList();\n                onClearList();\n                handleClose();\n              } catch (e) {\n                console.log(e);\n              }\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            ja\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport const ListPage = () => {\n  const { list, fetchList } = useListItems();\n  const [open, setOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    fetchList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <List>\n        {list.map(item => (\n          <ListItem\n            button\n            onClick={async () => {\n              await updateListItem({ ...item, inBasket: !item.inBasket });\n              fetchList();\n            }}\n            key={item.title}\n          >\n            <ListItemText>{item.title}</ListItemText>\n            <Checkbox\n              checked={item.inBasket}\n              inputProps={{\n                \"aria-label\": `${item.title} ist im Einkaufswagen`\n              }}\n            />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      {list.length > 0 && (\n        <Box mt={4}>\n          <ClearListDialog onClearList={fetchList} />\n        </Box>\n      )}\n      <SwipeableDrawer\n        anchor=\"bottom\"\n        open={open}\n        onOpen={() => setOpen(true)}\n        onClose={() => setOpen(false)}\n      >\n        <ListForm\n          onCompleted={() => {\n            setOpen(false);\n            fetchList();\n          }}\n        />\n      </SwipeableDrawer>\n      <BottomRightFab onClick={() => setOpen(true)} label=\"brauche sachen\">\n        <Add></Add>\n      </BottomRightFab>\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { Button, Snackbar } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nimport { getRecipesForExport, bulkAddRecipes, Recipe } from \"../db\";\n\nexport const ImportRecipes = () => {\n  const [recipes, setRecipes] = React.useState<Recipe[] | null>(null);\n  const [status, setStatus] = React.useState<\"pending\" | \"error\" | \"success\">();\n  const handleImportRecipes = (event: any) => {\n    const onReaderLoad = (event: any) => {\n      console.log(event.target.result);\n      const recipes = JSON.parse(event.target.result);\n      setRecipes(recipes);\n    };\n\n    const reader = new FileReader();\n    reader.onload = onReaderLoad;\n    reader.readAsText(event.target.files[0]);\n  };\n\n  return (\n    <>\n      <input type=\"file\" onChange={handleImportRecipes} />\n      <Button\n        onClick={async () => {\n          setStatus(\"pending\");\n          try {\n            await bulkAddRecipes(recipes || []);\n            setStatus(\"success\");\n          } catch {\n            setStatus(\"error\");\n          }\n        }}\n        disabled={recipes === null || status === \"pending\"}\n      >\n        importieren\n      </Button>\n      <Snackbar\n        autoHideDuration={4000}\n        open={status === \"error\"}\n        onClose={() => setStatus(undefined)}\n        message=\"Oh nein der import hat leider nicht geklappt\"\n      ></Snackbar>\n      <Snackbar\n        autoHideDuration={4000}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n        open={status === \"success\"}\n        onClose={() => setStatus(undefined)}\n        message={`Import erfolgreich ${recipes?.length ||\n          0} Rezepte hinzugefügt oder\n        aktualisiert`}\n      ></Snackbar>\n    </>\n  );\n};\n\nexport const ExportRecipes = () => {\n  const [href, updateHref] = React.useState(\"\");\n\n  const getData = async () => {\n    const recipes = await getRecipesForExport();\n    const data =\n      \"data:text/json;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(recipes));\n    updateHref(data);\n  };\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n\n  if (!href) {\n    return <Skeleton></Skeleton>;\n  }\n\n  return (\n    <Button download=\"recipes.json\" href={href}>\n      exportieren\n    </Button>\n  );\n};\n","import React from \"react\";\n\nimport {\n  Box,\n  Typography,\n  Divider,\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions\n} from \"@material-ui/core\";\nimport { ExportRecipes, ImportRecipes } from \"./import-export\";\n\nexport const SettingsPage = () => {\n  return (\n    <Box>\n      <Typography>Einstellungen</Typography>\n      <Divider />\n      <Card>\n        <CardHeader title=\"Rezepte\"></CardHeader>\n        <CardActions>\n          <ExportRecipes />\n        </CardActions>\n      </Card>\n      <Card>\n        <CardContent>\n          <ImportRecipes />\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  useNavigate\n  //@ts-ignore\n} from \"react-router-dom\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nimport {\n  Container,\n  BottomNavigation,\n  BottomNavigationAction,\n  makeStyles,\n  createStyles,\n  Theme,\n  AppBar,\n  Box\n} from \"@material-ui/core\";\n\nimport { RecipePage } from \"./recipe\";\nimport { ListPage } from \"./list\";\nimport { SettingsPage } from \"./settings\";\nimport { FormatListBulleted, MenuBook, Settings } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nav: {\n      marginTop: theme.spacing(8),\n      bottom: 0,\n      top: \"auto\"\n    }\n  })\n);\n\nconst BottomNav = () => {\n  const navigate = useNavigate();\n  const styles = useStyles();\n  const [value, setValue] = React.useState(\"recipes\");\n\n  React.useEffect(() => {\n    navigate(`/kochbuch/${value}`);\n  }, [navigate, value]);\n\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={styles.nav}>\n      <BottomNavigation value={value} showLabels>\n        <BottomNavigationAction\n          onClick={() => setValue(\"recipes\")}\n          value=\"recipes\"\n          label=\"Rezepte\"\n          icon={<FormatListBulleted />}\n        />\n        <BottomNavigationAction\n          onClick={() => setValue(\"list\")}\n          value=\"list\"\n          label=\"Liste\"\n          icon={<MenuBook />}\n        />\n        <BottomNavigationAction\n          onClick={() => setValue(\"settings\")}\n          value=\"settings\"\n          label=\"Einstellungen\"\n          icon={<Settings />}\n        />\n      </BottomNavigation>\n    </AppBar>\n  );\n};\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\"\n        }\n      }),\n    [prefersDarkMode]\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Container>\n          <Box mt={2} mb={8}>\n            <Routes>\n              <Route path=\"kochbuch/recipes/*\" element={<RecipePage />}></Route>\n              <Route path=\"kochbuch/list/*\" element={<ListPage />}></Route>\n              <Route\n                path=\"kochbuch/settings/*\"\n                element={<SettingsPage />}\n              ></Route>\n            </Routes>\n          </Box>\n        </Container>\n        <BottomNav />\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}