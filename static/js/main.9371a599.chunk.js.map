{"version":3,"sources":["common/fab.tsx","db.ts","recipe/recipe-hooks.tsx","recipe/recipe-form.tsx","recipe/recipe-page.tsx","list/list-hooks.tsx","list/list-form.tsx","list/list-page.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["fabStyles","makeStyles","theme","createStyles","fab","position","bottom","spacing","right","BottomRightFab","onClick","label","children","styles","Fab","className","color","aria-label","ListDb","Dexie","constructor","super","listItems","recipes","this","version","stores","table","db","addListItems","bulkPut","map","title","inBasket","recipeTitleCache","recipeListCache","useRecipeByTitle","status","setStatus","React","useState","fetchRecipe","async","result","recipe","where","equals","toArray","getRecipeByName","useEffect","retry","updateCache","useRecipes","setRecipes","hasMore","setHasMore","offsetRef","useRef","length","fetchRecipes","offset","limit","getPagedRecipes","current","count","RecipeForm","onComplete","Card","CardHeader","CardContent","autoComplete","onSubmit","form","e","currentTarget","preventDefault","nextRecipe","titleName","value","tags","ingredients","split","description","put","updateRecipe","add","addRecipe","reset","console","log","TextField","margin","fullWidth","defaultValue","required","name","multiline","Box","mt","Button","disabled","type","bgcolor","RecipeEditForm","navigate","useNavigate","id","useParams","decodeURIComponent","Skeleton","height","RecipeDetails","subheader","ingredient","Typography","key","style","whiteSpace","CardActions","Edit","RecipeList","List","ListItem","ListItemText","primary","secondary","Add","RecipePage","path","element","listItemsCache","useListItems","list","setList","fetchList","ListForm","onCompleted","startIcon","Save","ClearListDialog","onClearList","open","setOpen","handleClose","Dialog","onClose","aria-labelledby","DialogTitle","DialogActions","clear","autoFocus","ListPage","item","button","listItem","Checkbox","checked","inputProps","Divider","SwipeableDrawer","anchor","onOpen","useStyles","nav","marginTop","top","BottomNav","setValue","AppBar","BottomNavigation","showLabels","BottomNavigationAction","icon","FormatListBulleted","MenuBook","Settings","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","ThemeProvider","CssBaseline","Container","mb","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9371a599.chunk.js","sourcesContent":["import React from \"react\";\nimport { createStyles, makeStyles, Fab, Theme } from \"@material-ui/core\";\n\nconst fabStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: \"fixed\",\n      bottom: theme.spacing(8),\n\n      right: theme.spacing(2)\n    }\n  })\n);\n\nexport const BottomRightFab: React.FC<{\n  onClick: (e: any) => void;\n  label: string;\n}> = ({ onClick, label, children }) => {\n  const styles = fabStyles();\n  return (\n    <Fab\n      onClick={onClick}\n      className={styles.fab}\n      color=\"primary\"\n      aria-label={label}\n    >\n      {children}\n    </Fab>\n  );\n};\n","import Dexie from \"dexie\";\n\nexport interface ListItem {\n  title: string;\n  inBasket: boolean;\n}\n\nexport interface Recipe {\n  title: string;\n  tags: string;\n  ingredients: string[];\n  description: string;\n}\n\nexport const DEFAULT_PAGE_SIZE = 1;\n\nexport class ListDb extends Dexie {\n  listItems: Dexie.Table<ListItem, string>;\n  recipes: Dexie.Table<Recipe, string>;\n  constructor() {\n    super(\"ListDB6\");\n    this.version(1).stores({\n      listItems: \"title\",\n      recipes: \"title,tags\"\n    });\n    this.listItems = this.table(\"listItems\");\n    this.recipes = this.table(\"recipes\");\n  }\n}\n\nconst db = new ListDb();\n\nexport const getRecipeByName = async (title: string) => {\n  const [recipe] = await db.recipes\n    .where(\"title\")\n    .equals(title)\n    .toArray();\n\n  return recipe;\n};\n\nexport const getRecipes = () => {\n  return db.recipes.toArray();\n};\n\nexport const getPagedRecipes = (offset = 0) => {\n  return db.recipes\n    .offset(offset)\n    .limit(DEFAULT_PAGE_SIZE)\n    .toArray();\n};\n\nexport const getRecipesCount = () => {\n  return db.recipes.count();\n};\nexport const addRecipe = (recipe: Recipe) => {\n  return db.recipes.add(recipe);\n};\nexport const updateRecipe = (recipe: Recipe) => {\n  return db.recipes.put(recipe);\n};\n\nexport const getList = () => {\n  return db.listItems.toArray();\n};\n\nexport const addListItem = (listItem: ListItem) => {\n  return db.listItems.add(listItem);\n};\n\nexport const addListItems = (listItems: string[]) => {\n  return db.listItems.bulkPut(\n    listItems.map(title => ({\n      title,\n      inBasket: false\n    }))\n  );\n};\n\nexport const updateListItem = (listItem: ListItem) => {\n  return db.listItems.put(listItem);\n};\n\nexport const clearList = () => {\n  return db.listItems.clear();\n};\n","import React from \"react\";\n\nimport {\n  Recipe,\n  getRecipeByName,\n  getPagedRecipes,\n  getRecipesCount,\n  DEFAULT_PAGE_SIZE\n} from \"../db\";\n\nexport type Status<T = \"success\"> = \"\" | \"pending\" | \"error\" | T;\n\nconst recipeTitleCache: Record<string, Recipe> = {};\nlet recipeListCache: Recipe[] = [];\n\nexport const useRecipeByTitle = (title: string) => {\n  const [status, setStatus] = React.useState<Status<Recipe>>(\n    recipeTitleCache[title] || \"\"\n  );\n\n  const updateCache = (recipe: Recipe) => {\n    recipeTitleCache[recipe.title] = recipe;\n  };\n\n  const fetchRecipe = async (title: string) => {\n    try {\n      if (recipeTitleCache[title]) {\n        setStatus(recipeTitleCache[title]);\n        return;\n      }\n      setStatus(\"pending\");\n      const result = await getRecipeByName(title);\n      setStatus(result);\n      recipeTitleCache[title] = result;\n    } catch {\n      setStatus(\"error\");\n    }\n  };\n  React.useEffect(() => {\n    fetchRecipe(title);\n  }, [title]);\n\n  return {\n    status,\n    retry: fetchRecipe,\n    updateCache\n  };\n};\n\nexport const useRecipes = () => {\n  const status = \"\";\n  const [recipes, setRecipes] = React.useState<Recipe[]>(recipeListCache);\n  const [hasMore, setHasMore] = React.useState(false);\n  const offsetRef = React.useRef(recipeListCache.length);\n\n  const fetchRecipes = async () => {\n    try {\n      const result = await getPagedRecipes(offsetRef.current);\n      if (result.length) {\n        offsetRef.current += DEFAULT_PAGE_SIZE;\n        recipeListCache = [...recipes, ...result];\n        setRecipes(recipeListCache);\n        const count = await getRecipesCount();\n        setHasMore(count !== recipeListCache.length);\n      } else {\n        setHasMore(false);\n      }\n    } catch {}\n  };\n\n  return {\n    status,\n    hasMore,\n    recipes,\n    fetchRecipes\n  };\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Add, Edit } from \"@material-ui/icons\";\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Typography,\n  CardContent,\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  CardActions\n} from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nimport { BottomRightFab } from \"../common\";\nimport { Recipe, addRecipe, updateRecipe, addListItems } from \"../db\";\nimport { useRecipeByTitle, useRecipes } from \"./recipe-hooks\";\n\nexport const RecipeForm: React.FC<{\n  onComplete: (recipe: Recipe) => void;\n  recipe?: Recipe;\n}> = ({ onComplete, recipe }) => {\n  const [status, setStatus] = React.useState<\n    \"\" | \"pending\" | \"error\" | \"success\"\n  >(\"\");\n  return (\n    <Card>\n      <CardHeader title=\"Neues Rezept\" />\n      <CardContent>\n        <form\n          autoComplete=\"off\"\n          onSubmit={async e => {\n            const form = e.currentTarget;\n            e.preventDefault();\n            const nextRecipe: Recipe = {\n              title: form.titleName.value,\n              tags: form.tags.value || \"\",\n              ingredients: form.ingredients.value.split(\"\\n\"),\n              description: form.description.value\n            };\n            try {\n              setStatus(\"pending\");\n              if (recipe) {\n                await updateRecipe(nextRecipe);\n              } else {\n                await addRecipe(nextRecipe);\n              }\n              onComplete(nextRecipe);\n              form.reset();\n              setStatus(\"success\");\n            } catch (e) {\n              console.log(e);\n              setStatus(\"error\");\n            }\n          }}\n        >\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            defaultValue={recipe?.title}\n            required\n            label=\"Rezept Titel\"\n            name=\"titleName\"\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            defaultValue={recipe?.tags}\n            label=\"Tags\"\n            name=\"tags\"\n          />\n          <TextField\n            margin=\"normal\"\n            multiline\n            fullWidth\n            required\n            defaultValue={recipe?.ingredients}\n            label=\"Zutaten\"\n            name=\"ingredients\"\n          />\n          <TextField\n            margin=\"normal\"\n            multiline\n            fullWidth\n            required\n            defaultValue={recipe?.description}\n            label=\"Zubereitung\"\n            name=\"description\"\n          />\n          <Box mt={2}>\n            <Button\n              disabled={status === \"pending\"}\n              color=\"primary\"\n              type=\"submit\"\n            >\n              {recipe\n                ? `änderung an ${recipe.title} speichern`\n                : \"neues Rezept speichern\"}\n            </Button>\n          </Box>\n          <Box bgcolor=\"primary\" mt=\"2\">\n            {status === \"pending\" && \"erstelle Rezept\"}\n            {status === \"error\" && \"oh oh da ist etwas schief gelaufen\"}\n            {status === \"success\" && \"neues Rezept erstellt!\"}\n          </Box>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport const RecipeEditForm: React.FC = () => {\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const title = decodeURIComponent(id);\n  const { status, updateCache } = useRecipeByTitle(title);\n\n  if (status === \"\" || status === \"pending\" || status === \"error\") {\n    return <Skeleton height=\"12rem\" />;\n  }\n\n  return (\n    <RecipeForm\n      onComplete={recipe => {\n        updateCache(recipe);\n        navigate(`/recipes/${recipe.title}`);\n      }}\n      recipe={status}\n    />\n  );\n};\n\nexport const RecipeDetails: React.FC = () => {\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const title = decodeURIComponent(id);\n  const { status } = useRecipeByTitle(title);\n\n  if (status === \"\" || status === \"pending\") {\n    return <Skeleton height=\"12rem\" />;\n  }\n\n  if (status === \"error\") {\n    return <Box>rezpete konnten nicht geladen werden</Box>;\n  }\n\n  return (\n    <Box mt={3}>\n      <Card>\n        <CardHeader title={status.title} subheader={status.tags}></CardHeader>\n        <CardContent>\n          {status.ingredients.map(ingredient => (\n            <Typography key={ingredient}>{ingredient}</Typography>\n          ))}\n          <Typography style={{ whiteSpace: \"pre-wrap\" }}>\n            {status.description}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button\n            onClick={async () => {\n              await addListItems(status.ingredients);\n              navigate(\"/list\");\n            }}\n          >\n            {status.title} zur Einkaufsliste hinzufügen\n          </Button>\n        </CardActions>\n      </Card>\n      <BottomRightFab\n        onClick={() => navigate(\"edit\")}\n        label=\"Rezept bearbeiten\"\n        children={<Edit />}\n      />\n    </Box>\n  );\n};\n\nexport const ListLoader: React.FC = () => {\n  return (\n    <>\n      <Skeleton height=\"4rem\" />\n      <Skeleton height=\"4rem\" />\n    </>\n  );\n};\n\nexport const RecipeList = () => {\n  const { recipes, status, fetchRecipes, hasMore } = useRecipes();\n  const navigate = useNavigate();\n\n  React.useEffect(() => {\n    fetchRecipes();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <List>\n        {recipes.map(recipe => (\n          <ListItem\n            onClick={() => navigate(`${recipe.title}`)}\n            key={recipe.title}\n          >\n            <ListItemText primary={recipe.title} secondary={recipe.tags} />\n          </ListItem>\n        ))}\n      </List>\n      {hasMore && <Button onClick={fetchRecipes}>Load more</Button>}\n\n      {status === \"error\" && (\n        <Box>\n          rezpete konnten nicht geladen werden{\" \"}\n          <Button onClick={fetchRecipes}>nochmal versuchen</Button>\n        </Box>\n      )}\n      <BottomRightFab\n        onClick={() => navigate(\"add\")}\n        label=\"Rezept hinzufügen\"\n        children={<Add />}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n//@ts-ignore\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport {\n  RecipeForm,\n  RecipeList,\n  RecipeDetails,\n  RecipeEditForm\n} from \"./recipe-form\";\n\nexport const RecipePage = () => {\n  const navigate = useNavigate();\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<RecipeList />} />\n      <Route\n        path=\"/add\"\n        element={\n          <RecipeForm\n            onComplete={recipe => {\n              navigate(\"/recipes/\" + recipe.title);\n            }}\n          />\n        }\n      />\n      <Route path=\"/:id\" element={<RecipeDetails />} />\n      <Route path=\"/:id/edit\" element={<RecipeEditForm />} />\n    </Routes>\n  );\n};\n","import React from \"react\";\n\nimport { ListItem, getList } from \"../db\";\n\nlet listItemsCache: ListItem[] = [];\n\nexport const useListItems = () => {\n  const [list, setList] = React.useState<ListItem[]>(listItemsCache);\n\n  const fetchList = async () => {\n    try {\n      const result = await getList();\n      listItemsCache = result;\n      setList(result);\n    } catch {}\n  };\n\n  return {\n    list,\n    fetchList\n  };\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { Save } from \"@material-ui/icons\";\nimport {\n  Box,\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button\n} from \"@material-ui/core\";\n\nimport { addListItems } from \"../db\";\n\nexport const ListForm: React.FC<{ onCompleted(): void }> = ({\n  onCompleted\n}) => {\n  return (\n    <Box>\n      <Card>\n        <CardHeader title=\"Einkaufsliste erweitern\" />\n        <CardContent>\n          <form\n            onSubmit={async e => {\n              e.preventDefault();\n              const form = e.currentTarget;\n              const listItems: string[] = form.listItems.value.split(\"\\n\");\n              console.log(listItems);\n              try {\n                await addListItems(listItems);\n                form.reset();\n                onCompleted();\n              } catch (e) {\n                console.log(e);\n              }\n            }}\n          >\n            <TextField\n              multiline\n              fullWidth\n              name=\"listItems\"\n              label=\"Einkaufsliste\"\n              required\n            />\n            <Button type=\"submit\" startIcon={<Save />}>\n              speichern\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { useListItems } from \"./list-hooks\";\nimport {\n  ListItem,\n  ListItemText,\n  SwipeableDrawer,\n  List,\n  Divider,\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogActions,\n  Checkbox\n} from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\n\nimport { BottomRightFab } from \"../common\";\n\nimport { ListForm } from \"./list-form\";\nimport { clearList, updateListItem } from \"../db\";\n\nconst ClearListDialog: React.FC<{ onClearList(): void }> = ({\n  onClearList\n}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = () => setOpen(false);\n  const handleOpen = () => setOpen(true);\n\n  return (\n    <>\n      <Button onClick={handleOpen}>Liste löschen</Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"clear-list-dialog-title\"\n      >\n        <DialogTitle id=\"clear-list-dialog-title\">\n          Die Einkaufsliste leeren ?\n        </DialogTitle>\n\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            nein\n          </Button>\n          <Button\n            onClick={async () => {\n              try {\n                await clearList();\n                onClearList();\n                handleClose();\n              } catch (e) {\n                console.log(e);\n              }\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            ja\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport const ListPage = () => {\n  const { list, fetchList } = useListItems();\n  const [open, setOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    fetchList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <List>\n        {list.map(item => (\n          <ListItem\n            button\n            onClick={async () => {\n              await updateListItem({ ...item, inBasket: !item.inBasket });\n              fetchList();\n            }}\n            key={item.title}\n          >\n            <ListItemText>{item.title}</ListItemText>\n            <Checkbox\n              checked={item.inBasket}\n              inputProps={{\n                \"aria-label\": `${item.title} ist im Einkaufswagen`\n              }}\n            />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      {list.length > 0 && (\n        <Box mt={4}>\n          <ClearListDialog onClearList={fetchList} />\n        </Box>\n      )}\n      <SwipeableDrawer\n        anchor=\"bottom\"\n        open={open}\n        onOpen={() => setOpen(true)}\n        onClose={() => setOpen(false)}\n      >\n        <ListForm\n          onCompleted={() => {\n            setOpen(false);\n            fetchList();\n          }}\n        />\n      </SwipeableDrawer>\n      <BottomRightFab onClick={() => setOpen(true)} label=\"brauche sachen\">\n        <Add></Add>\n      </BottomRightFab>\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  useNavigate\n  //@ts-ignore\n} from \"react-router-dom\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nimport {\n  Container,\n  BottomNavigation,\n  BottomNavigationAction,\n  makeStyles,\n  createStyles,\n  Theme,\n  AppBar,\n  Box\n} from \"@material-ui/core\";\n\nimport { RecipePage } from \"./recipe\";\nimport { ListPage } from \"./list\";\nimport { FormatListBulleted, MenuBook, Settings } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nav: {\n      marginTop: theme.spacing(8),\n      bottom: 0,\n      top: \"auto\"\n    }\n  })\n);\n\nconst BottomNav = () => {\n  const navigate = useNavigate();\n  const styles = useStyles();\n  const [value, setValue] = React.useState(\"recipes\");\n\n  React.useEffect(() => {\n    navigate(`/${value}`);\n  }, [navigate, value]);\n\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={styles.nav}>\n      <BottomNavigation value={value} showLabels>\n        <BottomNavigationAction\n          onClick={() => setValue(\"recipes\")}\n          value=\"recipes\"\n          label=\"Rezepte\"\n          icon={<FormatListBulleted />}\n        />\n        <BottomNavigationAction\n          onClick={() => setValue(\"list\")}\n          value=\"list\"\n          label=\"Liste\"\n          icon={<MenuBook />}\n        />\n        <BottomNavigationAction\n          onClick={() => setValue(\"settings\")}\n          value=\"settings\"\n          label=\"Einstellungen\"\n          icon={<Settings />}\n        />\n      </BottomNavigation>\n    </AppBar>\n  );\n};\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\"\n        }\n      }),\n    [prefersDarkMode]\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Container>\n          <Box mt={2} mb={8}>\n            <Routes>\n              <Route path=\"/recipes/*\" element={<RecipePage />}></Route>\n              <Route path=\"/list/*\" element={<ListPage />}></Route>\n            </Routes>\n          </Box>\n        </Container>\n        <BottomNav />\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}